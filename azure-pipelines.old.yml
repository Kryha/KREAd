trigger:
  - develop

pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: build
    displayName: Build
    dependsOn: []
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - job: build
        displayName: Build Docker images
        steps:
          - script: curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 && sudo install skaffold /usr/local/bin/
            displayName: Install Skaffold
          - script: echo "##vso[task.setvariable variable=BUILDSTATE;isOutput=true]build-$(git rev-list -1 HEAD --abbrev-commit).json"
            name: printvar
            displayName: Write state variable
          - task: DownloadSecureFile@1
            name: authkey
            displayName: "Download Service Account Key"
            inputs:
              secureFile: web3-agoric.json
              retryCount: "2"
          - script: gcloud auth activate-service-account  web3-agoric-0@web3-335312.iam.gserviceaccount.com --key-file=$(authkey.secureFilePath)
            displayName: Activate Service Account
          - script: cd frontend && skaffold build --filename skaffold.staging.yaml --file-output "../$(printvar.BUILDSTATE)"
            displayName: Build and push docker images
          - publish: $(printvar.BUILDSTATE)
            artifact: BuildArtifacts
            displayName: Publish build artifacts

  - stage: deploy
    displayName: Deploy
    dependsOn: [build]
    variables:
      BUILDSTATE: $[ stageDependencies.build.build.outputs['printvar.BUILDSTATE'] ]
    jobs:
      - job: deploy
        displayName: Deploy
        steps:
          - task: Kubernetes@1
            inputs:
              connectionType: "Kubernetes Service Connection"
              kubernetesServiceEndpoint: "gke-service-connection"
              namespace: "character-builder-staging"
              command: "login"
          - script: curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 && sudo install skaffold /usr/local/bin/
            displayName: Install Skaffold
          - task: DownloadPipelineArtifact@2
            displayName: Download build artifacts
            inputs:
              artifactName: BuildArtifacts
              targetPath: $(System.DefaultWorkingDirectory)
          - script: cd frontend && skaffold deploy --filename skaffold.staging.yaml --build-artifacts "../$(BUILDSTATE)"
            displayName: Deploy build artifacts
